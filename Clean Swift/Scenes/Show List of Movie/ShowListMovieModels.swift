//
//  ShowListMovieModels.swift
//  Clean Swift
//
//  Created by Fabianus Hendy Evan on 05/04/19.
//  Copyright (c) 2019 Fabianus Hendy Evan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

enum MovieModel
{
    // MARK: Use cases
    
    struct Movie : Codable {
        
        var vote_count  :Int?
        var id         :Int?
        var video               :Bool?
        var voteAverage         :Double?
        var title               :String?
        var popularity          :Double?
        var poster_path          :String?
        var original_language    :String?
        var original_title       :String?
        
        
        //        init(from decoder: Decoder) throws {
        //            let values = try decoder.container(keyedBy: CodingKeys.self)
        //
        //            voteCount  = try values.decode(Int.self, forKey: .voteCount)
        //            id = try values.decode(Int.self, forKey: .id)
        //            video = try values.decode(Bool.self, forKey: .video)
        //            voteAverage = try values.decode(Double.self, forKey: .voteAverage)
        //            title = try values.decode(String.self, forKey: .title)
        //            popularity = try values.decode(Double.self, forKey: .popularity)
        //            posterPath = try values.decode(String.self, forKey: .posterPath)
        //            originalLanguage = try values.decode(String.self, forKey: .originalLanguage)
        //            originalTitle = try values.decode(String.self, forKey: .originalTitle)
        //        }
        ////
        //        func encode(to encoder: Encoder) throws {
        //
        //        }
        //
        //        enum CodingKeys:String,CodingKey
        //        {
        //            //will get renamed
        //            case voteCount = "vote_count"
        //            //will not get renamed
        //            case adult
        //            case id
        //            case video
        //            case voteAverage        = ""
        //            case title
        //            case popularity
        //            case posterPath         = "poster_path"
        //            case originalLanguage   = "original_language"
        //            case originalTitle      = "original_title"
        //        }
        
    }
    
    struct Movie2 {
        var voteCount           :Int     = 0
        var id                  :Int     = 0
        var video               :Bool    = false
        var voteAverage         :Double  = 0.0
        var title               :String  = ""
        var popularity          :Double  = 0.0
        var posterPath          :String  = ""
        var originalLanguage    :String  = ""
        var originalTitle       :String  = ""
        var backdropPath        :String  = ""
        var overview            :String  = ""
        
        static func decode(json: JSON) -> Movie2 {
            var decodeObject = Movie2()
            decodeObject.voteCount      = json["vote_count"].intValue
            decodeObject.id             = json["id"].intValue
            decodeObject.video          = json["video"].boolValue
            decodeObject.voteAverage    = json["vote_average"].doubleValue
            decodeObject.title          = json["title"].stringValue
            decodeObject.popularity     = json["popularity"].doubleValue
            decodeObject.posterPath     = json["poster_path"].stringValue
            decodeObject.originalTitle  = json["original_title"].stringValue
            decodeObject.originalLanguage = json["original_language"].stringValue
            decodeObject.backdropPath   = json["backdrop_path"].stringValue
            decodeObject.overview       = json["overview"].stringValue
            return decodeObject
        }
    }
    
    struct Request
    {
        //            var params : Params = Params()
        //
        //            init() {
        //                self.params["api_key"]          = "2280e7e3fb062bd9ef00f3b40a1f8746"
        //                self.params["language"]         = "en-US"
        //                self.params["sort_by"]          = "popularity.desc"
        //                self.params["include_adult"]    = false
        //                self.params["include_video"]    = false
        //                self.params["page"]             = 1
        //            }
    }
    struct Response
    {
        var listMovie : [Movie2]?
    }
    struct ViewModel
    {
        var listMovie : [Movie2]?
        var movie : Movie2?
    }
}
