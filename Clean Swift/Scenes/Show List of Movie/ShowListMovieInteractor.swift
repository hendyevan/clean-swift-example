//
//  ShowListMovieInteractor.swift
//  Clean Swift
//
//  Created by Fabianus Hendy Evan on 05/04/19.
//  Copyright (c) 2019 Fabianus Hendy Evan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowListMovieBusinessLogic
{
    func getListMovie()
    func getNowPlayingMovie()
    func getUpcomingMovie()
    func showDetail(movie: MovieModel.Movie2)
}

protocol ShowListMovieDataStore
{
    //var name: String { get set }
    var detailMovie: MovieModel.Movie2? { get set }
}

class ShowListMovieInteractor: ShowListMovieBusinessLogic, ShowListMovieDataStore
{
    var detailMovie: MovieModel.Movie2?
    
    var presenter: ShowListMoviePresentationLogic?
    var worker: ShowListMovieWorker?
    
    // MARK: Do something
    
    func getListMovie() {
        var params = [String:Any]()
        params["api_key"]  = "2280e7e3fb062bd9ef00f3b40a1f8746"
        params["language"] = "en-US"
        params["sort_by"]  = "popularity.desc"
        params["include_adult"] = false
        params["include_video"] = false
        params["page"] = 1
        
        worker = ShowListMovieWorker()
        worker?.generateMovieList(param: params){ result in
            switch result {
            case .success(let movieList):
                let response = MovieModel.ViewModel(listMovie: movieList, movie: nil)
                print(response)
            //                self.presenter?.presentMovie(response: response)
            case .failure(_):
                break
            }
        }
    }
    
    func getNowPlayingMovie() {
        var params = [String:Any]()
        params["api_key"]  = "2280e7e3fb062bd9ef00f3b40a1f8746"
        params["language"] = "en-US"
        params["sort_by"]  = "popularity.desc"
        
        worker = ShowListMovieWorker()
        worker?.fetchNowPlayingMovie(param: params){ result in
            switch result {
            case .success(let movieList):
                let response = MovieModel.ViewModel(listMovie: movieList, movie: nil)
                self.presenter?.presentNowPlayingMovie(response: response)
            case .failure(_):
                break
            }
        }
    }
    
    func getUpcomingMovie() {
        var params = [String:Any]()
        params["api_key"]  = "2280e7e3fb062bd9ef00f3b40a1f8746"
        params["language"] = "en-US"
        params["sort_by"]  = "popularity.desc"
        
        worker = ShowListMovieWorker()
        worker?.fetchUpcomingMovie(param: params){ result in
            switch result {
            case .success(let movieList):
                let response = MovieModel.ViewModel(listMovie: movieList, movie: nil)
                self.presenter?.presentUpcomingMovie(response: response)
            case .failure(_):
                break
            }
        }
    }
    
    func showDetail(movie: MovieModel.Movie2) {
        self.detailMovie = movie
        let response = MovieModel.ViewModel(listMovie: nil, movie: movie)
        presenter?.presentDetailMovie(response: response)
    }
}
