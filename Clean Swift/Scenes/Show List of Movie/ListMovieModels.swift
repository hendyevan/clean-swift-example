//
//  ShowListMovieModels.swift
//  Clean Swift
//
//  Created by Fabianus Hendy Evan on 05/04/19.
//  Copyright (c) 2019 Fabianus Hendy Evan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyJSON

struct MovieModel
{
    // MARK: Use cases
    
    struct Movie2 {
        var voteCount           :Int     = 0
        var id                  :Int     = 0
        var video               :Bool    = false
        var voteAverage         :Double  = 0.0
        var title               :String  = ""
        var popularity          :Double  = 0.0
        var posterPath          :String  = ""
        var originalLanguage    :String  = ""
        var originalTitle       :String  = ""
        var backdropPath        :String  = ""
        var overview            :String  = ""
        
        static func decode(json: JSON) -> Movie2 {
            var decodeObject = Movie2()
            decodeObject.voteCount      = json["vote_count"].intValue
            decodeObject.id             = json["id"].intValue
            decodeObject.video          = json["video"].boolValue
            decodeObject.voteAverage    = json["vote_average"].doubleValue
            decodeObject.title          = json["title"].stringValue
            decodeObject.popularity     = json["popularity"].doubleValue
            decodeObject.posterPath     = json["poster_path"].stringValue
            decodeObject.originalTitle  = json["original_title"].stringValue
            decodeObject.originalLanguage = json["original_language"].stringValue
            decodeObject.backdropPath   = json["backdrop_path"].stringValue
            decodeObject.overview       = json["overview"].stringValue
            return decodeObject
        }
    }
    
    struct Results: Decodable {
        var results: [Movie]
        var page: Int
    }
    
    struct Request
    {
        var params : Params = Params()
        
        init(apiKey: String, language: String, sortBy: String, isAdult: Bool, includeVideo: Bool, page: Int) {
            self.params["api_key"]          = apiKey
            self.params["language"]         = language
            self.params["sort_by"]          = sortBy
            self.params["include_adult"]    = isAdult
            self.params["include_video"]    = includeVideo
            self.params["page"]             = page
        }
    }
    
    struct Response
    {
        var listMovie : [Movie2]?
    }
    
    struct ViewModel
    {
        var listMovie : [Movie2]?
        var movie : Movie2?
    }
}


struct Movie : Decodable {
    
    var voteCount: Int
    var id: Int
    var video: Bool
    var voteAverage: Double
    var title: String
    var popularity: Double
    var posterPath: String
    var originalLanguage: String
    var originalTitle: String
    var genreIds: [Int]
    var backdropPath: String
    var adult: Bool
    var overview: String
    var releaseDate: String
    
    enum CodingKeys: String, CodingKey {
        case voteCount = "vote_count"
        case id
        case video
        case voteAverage        = "vote_average"
        case title
        case popularity
        case posterPath         = "poster_path"
        case originalLanguage   = "original_language"
        case originalTitle      = "original_title"
        case backdropPath       = "backdrop_path"
        case adult
        case overview
        case releaseDate        = "release_date"
        case genreIds           = "genre_ids"
    }
    
}
