//
//  ShowListMovieWorker.swift
//  Clean Swift
//
//  Created by Fabianus Hendy Evan on 05/04/19.
//  Copyright (c) 2019 Fabianus Hendy Evan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ListMovieWorker
{
    
    func generateMovieList(param: Params, callBack: @escaping(APIResult<[MovieModel.Movie2]>)->Void) {
        APIHelper.init("https://api.themoviedb.org/3/").request("discover/movie?", parameters: param, method: .post){ result in
            switch result {
            case .success(let json):
                var movieList = [MovieModel.Movie2]()
                
                for movie in json["results"].arrayValue{
                    movieList.append(MovieModel.Movie2.decode(json: movie))
                }
                
                callBack(.success(movieList))
            case .failure(let error):
                print(error)
            }
        }
    }
    
    func fetchNowPlayingMovie(param: Params, callBack: @escaping(APIResult<[MovieModel.Movie2]>)->Void){
        APIHelper.init("https://api.themoviedb.org/3/").request("movie/now_playing?", parameters: param, method: .post){ result in
            switch result {
            case .success(let json):
                var movieList = [MovieModel.Movie2]()
                
                for movie in json["results"].arrayValue{
                    movieList.append(MovieModel.Movie2.decode(json: movie))
                }
                
                callBack(.success(movieList))
            case .failure(let error):
                print(error)
            }
        }
    }
    
    func fetchUpcomingMovie(param: Params, callBack: @escaping(APIResult<[MovieModel.Movie2]>)->Void){
        APIHelper.init("https://api.themoviedb.org/3/").request("movie/upcoming?", parameters: param, method: .post){ result in
            switch result {
            case .success(let json):
                var movieList = [MovieModel.Movie2]()
                
                for movie in json["results"].arrayValue{
                    movieList.append(MovieModel.Movie2.decode(json: movie))
                }
                
                callBack(.success(movieList))
            case .failure(let error):
                print(error)
            }
        }
    }
}
